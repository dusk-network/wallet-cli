name: Compile CLI wallet binaries

on:
  workflow_dispatch:
    inputs:
      dusk_blockchain_ref:
        description: "GIT branch, ref, or SHA to checkout"
        required: true
        default: "main"

defaults:
  run:
    shell: bash

jobs:
  build_and_publish:
    name: Build rusk-wallet binaries for ${{ matrix.os }} with ${{ matrix.compiler }}.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-11, windows-latest]
        compiler: [cargo]
        include:
          - os: ubuntu-latest
            compiler: cargo
            target: linux-x64

          - os: macos-latest
            compiler: cargo
            target: macos-intel

          - os: macos-11
            compiler: cargo
            target: macos-arm64
            flags: --target=aarch64-apple-darwin
            platform: aarch64-apple-darwin

          - os: windows-latest
            compiler: cargo
            target: windows-x64

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.dusk_blockchain_ref }}

      - name: Install dependencies
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Add rustfmt component
        run: rustup component add rustfmt

      - name: Add arm target for Apple Silicon build
        run: rustup target add aarch64-apple-darwin
        if: ${{ matrix.os == 'macos-11' }}

      - name: Install Analyzer  
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --git https://github.com/dusk-network/cargo-dusk-analyzer
        
      - name: Run Analyzer  
        uses: actions-rs/cargo@v1
        with:
          command: dusk-analyzer

      - name: Run tests
        run: make test

      - name: Clippy check release
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --release -- -D warnings

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Build Wallet
        shell: bash
        working-directory: ./
        run: ${{matrix.compiler}} b --release --verbose ${{matrix.flags}}

      - name: Get semver from wallet binary
        run: |
          ls -la target/release
          export SEMVER=$(cargo pkgid | perl -lpe 's/.*#.*:(.*)/$1/')
          echo "SEMVER=$SEMVER" >> $GITHUB_ENV

      - name: "Pack binaries"
        run: |
          mkdir rusk-wallet${{env.SEMVER}}-${{matrix.target}}
          echo "Fetching changelog and readme files..."
          mv target/${{matrix.platform}}/release/rusk-wallet rusk-wallet${{env.SEMVER}}-${{matrix.target}}
          cp CHANGELOG.md rusk-wallet${{env.SEMVER}}-${{matrix.target}}
          cp README.md rusk-wallet${{env.SEMVER}}-${{matrix.target}}
          tar -czvf ruskwallet${{env.SEMVER}}-${{matrix.target}}.tar.gz rusk-wallet${{env.SEMVER}}-${{matrix.target}}
          ls -la *.gz

      - name: "Upload Wallet Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: wallet-binaries-${{env.SEMVER}}
          path: |
            ./*.gz
          retention-days: 5